class Snake {

  // Statics
  static int _segment_size;
  static int _speed;
  static int _max_length;

  // Fields 
  field Point _head;
  field Point _tail;
  field int _current_length;
  field boolean _alive;
  field int _direction; // 1 - up, 2 - down, 3 - left, 4 - right

  // Global Init
  function void init() {
    let _segment_size = 10;
    let _speed = 10;
    let _max_length = 32;
    return;
  }

  // Constructor & Dispose
  constructor Snake new() {
    let _head = Point.new(256, 128);
    let _tail = Point.new(246, 128);

    do _head.setNext(_tail);
    do _tail.setPrev(_head);

    let _current_length = 2;
    let _alive = true;

    do draw();

    return this;
  }
  
  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  // Instance Methods
  method void set_direction(int direction) {
    let _direction = direction;
    return;
  }

  method void update() {
    do erase();

    do grow();

    do remove_tail();

    do draw();
        
    do check_edges();

    do Sys.wait(500);

    return;
  }

  method void check_edges() {
    if (_head.get_y() < 1) {
      let _alive = false;
    }
    if ((_head.get_y() + _segment_size) > (255 - _speed)) {
      let _alive = false;
    }
    if (_head.get_x() < 1) {
      let _alive = false;
    }
    if ((_head.get_x() + _segment_size) > (511 - _speed)) {
      let _alive = false;
    }

    return;
  } 

  method void erase() { 
    var Point seg;

    do Screen.setColor(false); // white

    let seg = _head;

    while (~(seg = null)) { 
      do seg.draw(_segment_size);
      let seg = seg.next();
    }

    return;
  }

  method void grow() { 
    var int new_head_x;
    var int new_head_y;
    var Point new_head;

    let new_head_x = _head.get_x();
    let new_head_y = _head.get_y();

    // up
    if (_direction = 1) {
      let new_head_y = new_head_y - _speed;
    }

    // down
    if (_direction = 2) {
      let new_head_y = new_head_y + _speed;
    }

    // left
    if (_direction = 3) {
      let new_head_x = new_head_x - _speed;
    }

    // right
    if (_direction = 4) {
      let new_head_x = new_head_x + _speed;
    }

    // Add an element to the start of the linked list
    let new_head = Point.new(new_head_x, new_head_y);
    do new_head.setNext(_head);
    do _head.setPrev(new_head);
    let _head = new_head;

    let _current_length = _current_length + 1;

    return;
  }

  method void remove_tail() {
    var Point new_tail;

    // Remove an element from the tail of the list
    let new_tail = _tail.prev();
    do new_tail.setNext(null);
    let _tail = new_tail;

    let _current_length = _current_length - 1;

    return;
  }

  method void draw() { 
    var Point seg;

    do Screen.setColor(true); // black

    let seg = _head;

    while (~(seg = null)) { 
      do seg.draw(_segment_size);
      let seg = seg.next();
    }

    return;
  }

  method boolean is_dead() {
    return ~_alive;
  }

  method void debug() {
    do _head.debug();
    return;
  }
}
