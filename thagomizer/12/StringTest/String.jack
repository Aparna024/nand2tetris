// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
  field Array s;
  field int length;
  field int max;

  /** Constructs a new empty String with a maximum length of maxLength. */
  constructor String new(int maxLength) {
    let max = maxLength;
    let length = 0;

    if (maxLength > 0) { 
      let s = Array.new(max);
    } 
    if (maxLength < 0 ) {
      do Sys.error(14);
    }

    return this;
  }

  /** De-allocates the string and frees its space. */
  method void dispose() {
    if (max > 0) { 
      do s.dispose();
    }
    return;
  }

  /** Returns the current length of this String. */
  method int length() {
    return length;
  }

  /** Returns the character at location j. */
  method char charAt(int j) {
    if ((j > length) | (j = length)) {
      do Sys.error(15);
      return 0;
    }

    return s[j];
  }

  /** Sets the j'th character of this string to be c. */
  method void setCharAt(int j, char c) {
    if ((j > length) | (j = length)) {
      do Sys.error(16);
      return;
    }

    let s[j] = c;
    return;
  }

  /** Appends the character c to the end of this String.
   *  Returns this string as the return value. */
  method String appendChar(char c) {
    if (length = max) {
      do Sys.error(17);
      return this;
    }

    let s[length] = c;
    let length = length + 1;
    return this;
  }

  /** Erases the last character from this String. */
  method void eraseLastChar() {
    if (length = 0) {
      do Sys.error(18);
    }
    else {
      let length = length - 1;
    }

    return;
  }

  /** Returns the integer value of this String until the first non
   *  numeric character. */
  method int intValue() {
    var int value;
    var int digit;
    var int i;
    var boolean neg;

    let value = 0;
    let i = 0;
    let digit = 0;
    let neg = false;

    if (s[i] = 45) {
      let neg = true;
      let i = 1;
    }
    
    while (i < length) {
      let digit = String.charToInt(s[i]);
      
      let value = value * 10 + digit;

      let i = i + 1;
    }

    if (neg) {
      let value = -value;
    }

    return value;
  }

  /** Sets this String to hold a representation of the given number. */
  method void setInt(int number) {
    var Array backwards;
    var int lastDigit;
    var char character;
    var int i;

    let length = 0;       // reset the length field of this
    let i = 0;

    if (number < 0) {
      let number = Math.abs(number);

      do appendChar(45); // '-'
    } 

    // go through the least to most sig and put in backwards Array
    let backwards = Array.new(6);

    while (number > 0) {
      let lastDigit = String.mod(number, 10);
      let character = String.intToChar(lastDigit);
      
      let backwards[i] = character;
      let number = number / 10;
      let i = i + 1;
    }

    while (i > 0) {
      let i = i - 1;
      do appendChar(backwards[i]);
    }

    return;
  }

  /** Returns the new line character. */
  function char newLine() {
    return 128;
  }

  /** Returns the backspace character. */
  function char backSpace() {
    return 129;
  }

  /** Returns the double quote (") character. */
  function char doubleQuote() {
    return 34;
  }

  /** It pains me to write this here. */
  function int mod(int number, int divisor) {
    var int product;

    let product = (number / divisor) * divisor;

    return number - product;
  }

  /** Returns the int value for a specific char. */ 
  function int charToInt(char c) { 
    return c - 48;
  }

  /** Returns the int value for a specific char. */ 
  function char intToChar(int i) { 
    return i + 48;
  }
}
