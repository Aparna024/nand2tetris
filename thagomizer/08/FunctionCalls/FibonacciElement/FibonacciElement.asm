// bootstrap
@256		 // 0
D=A		 // 1
@SP		 // 2
M=D		 // 3
@RET0001		 // 4
D=A		 // 5
@SP		 // 6
A=M		 // 7
M=D		 // 8
@SP		 // 9
M=M+1		 // 10
@LCL		 // 11
D=M		 // 12
@SP		 // 13
A=M		 // 14
M=D		 // 15
@SP		 // 16
M=M+1		 // 17
@ARG		 // 18
D=M		 // 19
@SP		 // 20
A=M		 // 21
M=D		 // 22
@SP		 // 23
M=M+1		 // 24
@THIS		 // 25
D=M		 // 26
@SP		 // 27
A=M		 // 28
M=D		 // 29
@SP		 // 30
M=M+1		 // 31
@THAT		 // 32
D=M		 // 33
@SP		 // 34
A=M		 // 35
M=D		 // 36
@SP		 // 37
M=M+1		 // 38
@SP		 // 39
D=M		 // 40
@5		 // 41
D=D-A		 // 42
@ARG		 // 43
M=D		 // 44
@SP		 // 45
D=M		 // 46
@LCL		 // 47
M=D		 // 48
@Sys.init		 // 49
0;JMP		 // 50
(RET0001)
// function Main.fibonacci 0
(Main.fibonacci)
@0		 // 51
D=A		 // 52
@R13		 // 53
M=D		 // 54
@ONWARD0003		 // 55
D;JLE		 // 56
(LOOP0002)
@0		 // 57
D=A		 // 58
@SP		 // 59
A=M		 // 60
M=D		 // 61
@SP		 // 62
M=M+1		 // 63
@R13		 // 64
MD=M-1		 // 65
@LOOP0002		 // 66
D;JGT		 // 67
(ONWARD0003)
// push argument 0
@0		 // 68
D=A		 // 69
@ARG		 // 70
A=M+D		 // 71
D=M		 // 72
@SP		 // 73
A=M		 // 74
M=D		 // 75
@SP		 // 76
M=M+1		 // 77
// push constant 2
@2		 // 78
D=A		 // 79
@SP		 // 80
A=M		 // 81
M=D		 // 82
@SP		 // 83
M=M+1		 // 84
// lt
@SP		 // 85
AM=M-1		 // 86
D=M		 // 87
@SP		 // 88
AM=M-1		 // 89
A=M		 // 90
D=A-D		 // 91
@TRUE0004		 // 92
D;JLT		 // 93
D=0		 // 94
@PUSHD0005		 // 95
0;JMP		 // 96
(TRUE0004)
D=-1		 // 97
(PUSHD0005)
@SP		 // 98
A=M		 // 99
M=D		 // 100
@SP		 // 101
M=M+1		 // 102
// if-goto
@SP		 // 103
AM=M-1		 // 104
D=M		 // 105
@IF_TRUE		 // 106
D;JNE		 // 107
// goto
@IF_FALSE		 // 108
0;JMP		 // 109
// label
(IF_TRUE)
// push argument 0
@0		 // 110
D=A		 // 111
@ARG		 // 112
A=M+D		 // 113
D=M		 // 114
@SP		 // 115
A=M		 // 116
M=D		 // 117
@SP		 // 118
M=M+1		 // 119
// return
@LCL		 // 120
D=M		 // 121
@R14		 // 122
M=D		 // 123
@5		 // 124
AD=D-A		 // 125
D=M		 // 126
@R15		 // 127
M=D		 // 128
@SP		 // 129
AM=M-1		 // 130
D=M		 // 131
@ARG		 // 132
A=M		 // 133
M=D		 // 134
@ARG		 // 135
D=M+1		 // 136
@SP		 // 137
M=D		 // 138
@R14		 // 139
AMD=M-1		 // 140
D=M		 // 141
@THAT		 // 142
M=D		 // 143
@R14		 // 144
AMD=M-1		 // 145
D=M		 // 146
@THIS		 // 147
M=D		 // 148
@R14		 // 149
AMD=M-1		 // 150
D=M		 // 151
@ARG		 // 152
M=D		 // 153
@R14		 // 154
AMD=M-1		 // 155
D=M		 // 156
@LCL		 // 157
M=D		 // 158
@R15		 // 159
A=M		 // 160
0;JMP		 // 161
// label
(IF_FALSE)
// push argument 0
@0		 // 162
D=A		 // 163
@ARG		 // 164
A=M+D		 // 165
D=M		 // 166
@SP		 // 167
A=M		 // 168
M=D		 // 169
@SP		 // 170
M=M+1		 // 171
// push constant 2
@2		 // 172
D=A		 // 173
@SP		 // 174
A=M		 // 175
M=D		 // 176
@SP		 // 177
M=M+1		 // 178
// sub
@SP		 // 179
AM=M-1		 // 180
D=M		 // 181
@SP		 // 182
AM=M-1		 // 183
A=M		 // 184
D=A-D		 // 185
@SP		 // 186
A=M		 // 187
M=D		 // 188
@SP		 // 189
M=M+1		 // 190
// call Main.fibonacci 1
@RET0006		 // 191
D=A		 // 192
@SP		 // 193
A=M		 // 194
M=D		 // 195
@SP		 // 196
M=M+1		 // 197
@LCL		 // 198
D=M		 // 199
@SP		 // 200
A=M		 // 201
M=D		 // 202
@SP		 // 203
M=M+1		 // 204
@ARG		 // 205
D=M		 // 206
@SP		 // 207
A=M		 // 208
M=D		 // 209
@SP		 // 210
M=M+1		 // 211
@THIS		 // 212
D=M		 // 213
@SP		 // 214
A=M		 // 215
M=D		 // 216
@SP		 // 217
M=M+1		 // 218
@THAT		 // 219
D=M		 // 220
@SP		 // 221
A=M		 // 222
M=D		 // 223
@SP		 // 224
M=M+1		 // 225
@SP		 // 226
D=M		 // 227
@6		 // 228
D=D-A		 // 229
@ARG		 // 230
M=D		 // 231
@SP		 // 232
D=M		 // 233
@LCL		 // 234
M=D		 // 235
@Main.fibonacci		 // 236
0;JMP		 // 237
(RET0006)
// push argument 0
@0		 // 238
D=A		 // 239
@ARG		 // 240
A=M+D		 // 241
D=M		 // 242
@SP		 // 243
A=M		 // 244
M=D		 // 245
@SP		 // 246
M=M+1		 // 247
// push constant 1
@1		 // 248
D=A		 // 249
@SP		 // 250
A=M		 // 251
M=D		 // 252
@SP		 // 253
M=M+1		 // 254
// sub
@SP		 // 255
AM=M-1		 // 256
D=M		 // 257
@SP		 // 258
AM=M-1		 // 259
A=M		 // 260
D=A-D		 // 261
@SP		 // 262
A=M		 // 263
M=D		 // 264
@SP		 // 265
M=M+1		 // 266
// call Main.fibonacci 1
@RET0007		 // 267
D=A		 // 268
@SP		 // 269
A=M		 // 270
M=D		 // 271
@SP		 // 272
M=M+1		 // 273
@LCL		 // 274
D=M		 // 275
@SP		 // 276
A=M		 // 277
M=D		 // 278
@SP		 // 279
M=M+1		 // 280
@ARG		 // 281
D=M		 // 282
@SP		 // 283
A=M		 // 284
M=D		 // 285
@SP		 // 286
M=M+1		 // 287
@THIS		 // 288
D=M		 // 289
@SP		 // 290
A=M		 // 291
M=D		 // 292
@SP		 // 293
M=M+1		 // 294
@THAT		 // 295
D=M		 // 296
@SP		 // 297
A=M		 // 298
M=D		 // 299
@SP		 // 300
M=M+1		 // 301
@SP		 // 302
D=M		 // 303
@6		 // 304
D=D-A		 // 305
@ARG		 // 306
M=D		 // 307
@SP		 // 308
D=M		 // 309
@LCL		 // 310
M=D		 // 311
@Main.fibonacci		 // 312
0;JMP		 // 313
(RET0007)
// add
@SP		 // 314
AM=M-1		 // 315
D=M		 // 316
@SP		 // 317
AM=M-1		 // 318
A=M		 // 319
D=A+D		 // 320
@SP		 // 321
A=M		 // 322
M=D		 // 323
@SP		 // 324
M=M+1		 // 325
// return
@LCL		 // 326
D=M		 // 327
@R14		 // 328
M=D		 // 329
@5		 // 330
AD=D-A		 // 331
D=M		 // 332
@R15		 // 333
M=D		 // 334
@SP		 // 335
AM=M-1		 // 336
D=M		 // 337
@ARG		 // 338
A=M		 // 339
M=D		 // 340
@ARG		 // 341
D=M+1		 // 342
@SP		 // 343
M=D		 // 344
@R14		 // 345
AMD=M-1		 // 346
D=M		 // 347
@THAT		 // 348
M=D		 // 349
@R14		 // 350
AMD=M-1		 // 351
D=M		 // 352
@THIS		 // 353
M=D		 // 354
@R14		 // 355
AMD=M-1		 // 356
D=M		 // 357
@ARG		 // 358
M=D		 // 359
@R14		 // 360
AMD=M-1		 // 361
D=M		 // 362
@LCL		 // 363
M=D		 // 364
@R15		 // 365
A=M		 // 366
0;JMP		 // 367
// function Sys.init 0
(Sys.init)
@0		 // 368
D=A		 // 369
@R13		 // 370
M=D		 // 371
@ONWARD0009		 // 372
D;JLE		 // 373
(LOOP0008)
@0		 // 374
D=A		 // 375
@SP		 // 376
A=M		 // 377
M=D		 // 378
@SP		 // 379
M=M+1		 // 380
@R13		 // 381
MD=M-1		 // 382
@LOOP0008		 // 383
D;JGT		 // 384
(ONWARD0009)
// push constant 4
@4		 // 385
D=A		 // 386
@SP		 // 387
A=M		 // 388
M=D		 // 389
@SP		 // 390
M=M+1		 // 391
// call Main.fibonacci 1
@RET0010		 // 392
D=A		 // 393
@SP		 // 394
A=M		 // 395
M=D		 // 396
@SP		 // 397
M=M+1		 // 398
@LCL		 // 399
D=M		 // 400
@SP		 // 401
A=M		 // 402
M=D		 // 403
@SP		 // 404
M=M+1		 // 405
@ARG		 // 406
D=M		 // 407
@SP		 // 408
A=M		 // 409
M=D		 // 410
@SP		 // 411
M=M+1		 // 412
@THIS		 // 413
D=M		 // 414
@SP		 // 415
A=M		 // 416
M=D		 // 417
@SP		 // 418
M=M+1		 // 419
@THAT		 // 420
D=M		 // 421
@SP		 // 422
A=M		 // 423
M=D		 // 424
@SP		 // 425
M=M+1		 // 426
@SP		 // 427
D=M		 // 428
@6		 // 429
D=D-A		 // 430
@ARG		 // 431
M=D		 // 432
@SP		 // 433
D=M		 // 434
@LCL		 // 435
M=D		 // 436
@Main.fibonacci		 // 437
0;JMP		 // 438
(RET0010)
// label
(WHILE)
// goto
@WHILE		 // 439
0;JMP		 // 440
