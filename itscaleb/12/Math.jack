// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {
	static Array twoToThe;
	static int numberBitLength;

    /** Initializes the library. */
    function void init() {
		let numberBitLength = 16;
		let twoToThe = Array.new(numberBitLength);
		let twoToThe[0] = 1;
		let twoToThe[1] = 2;
		let twoToThe[2] = 4;
		let twoToThe[3] = 8;
		let twoToThe[4] = 16;
		let twoToThe[5] = 32;
		let twoToThe[6] = 64;
		let twoToThe[7] = 128;
		let twoToThe[8] = 256;
		let twoToThe[9] = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
		let twoToThe[15] = 16384 + 16384;
		return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if(x < 0) {
			return -x;
		}
		return x;
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
		var int sum, shiftedX, i;
		let sum = 0;
		let shiftedX = x;
		let i = 0;

		while(i < numberBitLength)
		{
			if(Math.bit(y, i))
			{
				let sum = sum + shiftedX;
			}
			let shiftedX = shiftedX + shiftedX;
			let i = i + 1;
		}

		return sum;
    }


	/** returns true if the j'th bit of x is set */
    function bool bit(int x, int j)
    {
	    return (~(x & twoToThe[j] = 0));
    }

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
		var int absX, absY, q, result;
        var boolean negative;
		let negative = ~(((x > 0) & (y > 0)) | ((x < 0) & (y < 0)));
        let absX = Math.abs(x);
        let absY = Math.abs(y);

        if( absY > absX ) {
            return 0;
        }

        let q = Math.divide(absX, absY + absY);

        if (absX - ((q + q) * absY) < absY ) {
            let result = q + q;
        }
		else {
			let result = q + q + 1;
		}
        if (negative) {
            return -result;
        }
		return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int y, j, yPlus2ToTheJ, yPlus2ToTheJSquared;
		let y = 0;
		let j = Math.divide(numberBitLength, 2) - 1;
		while(j > -1) {
			let yPlus2ToTheJ = y + twoToThe[j];
			let yPlus2ToTheJSquared = yPlus2ToTheJ * yPlus2ToTheJ;
			if(~(yPlus2ToTheJSquared > x)) {
				let y = yPlus2ToTheJ;
			}
			let j = j - 1;
		}
		return y;
	}

    /** Returns the greater number. */
    function int max(int a, int b) {
		if(a > b) {
			return a;
		}
		return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if(a < b) {
			return a;
		}
		return b;
    }
}
