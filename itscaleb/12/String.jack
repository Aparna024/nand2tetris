// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
	field Array charArray;
	field int stringLength, maxStrLength;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
		let maxStrLength = maxLength;
		if (maxLength > 0) {
			let charArray = Array.new(maxLength);
		}
		let stringLength = 0;
		return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
		if (maxStrLength > 0) {
			do Memory.deAlloc(charArray);
		}
		return;
    }

    /** Returns the current length of this String. */
    method int length() {
		return stringLength;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
		if (j < stringLength) {
			return charArray[j];
		}
		return 0;
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
		if (j < stringLength) {
			let charArray[j] = c;
		}
		return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
		if (stringLength < maxStrLength) {
			let charArray[stringLength] = c;
			let stringLength = stringLength + 1;
		}
		return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
		if (stringLength > 0) {
			let stringLength = stringLength - 1;
		}
		return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
		var int value, i, currDigit;
		var boolean negative;
		let value = 0;
		let i = 0;
		while(i < stringLength) {
			if (charArray[i] = 45) {
				let negative = true;
			}
			else {
				let currDigit = charArray[i] - 48;
				let value = value * 10 + currDigit;
			}
			let i = i + 1;
		}
		if (negative) {
			return -value;
		}
		return value;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
		var int currNum, i;
		var boolean negative;
		let i = 0;
		let maxStrLength = 6;
		if (number < 0) {
			let negative = true;
			let number = -number;
		}
		do charArray.dispose();
		let charArray = Array.new(maxStrLength);
		let stringLength = 0;
		while(number > 0) {
			let currNum = String.mod(number, 10);
			let charArray[i] = (currNum + 48);
			let i = i + 1;
			let number = Math.divide(number, 10);
			let stringLength = stringLength + 1;
		}
		if (negative) {
			let charArray[stringLength] = 45;
			let stringLength = stringLength + 1;
		}
		do String.reverse(charArray, stringLength);
		return;
    }

	function int mod(int x, int y) {
		var int q;
		let q = Math.divide(x, y);
		return x - (y * q);
	}

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }

	function void reverse(Array string, int stringLength) {
		var char temp;
		var Array startPointer;
		var Array endPointer;
		let startPointer = string;
		let endPointer = string + stringLength - 1;
		while(startPointer < endPointer)
		{
			let temp = startPointer[0];
			let startPointer[0] = endPointer[0];
			let endPointer[0] = temp;
			let startPointer = startPointer + 1;
			let endPointer = endPointer - 1;
		}
		return;
	}
}
