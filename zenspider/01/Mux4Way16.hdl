// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux4Way16.hdl

/**
 * 4-way 16-bit multiplexor.
 * out = a if sel==00
 *       b if sel==01
 *       c if sel==10
 *       d if sel==11
 */

CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];

    PARTS:

    // First define hi, lo, notHi, notLo:
    And(a=sel[0], b=sel[0], out=lo); // HACK, just to give it a name
    And(a=sel[1], b=sel[1], out=hi); // HACK, just to give it a name
    Not(in=lo, out=notLo);
    Not(in=hi, out=notHi);

    // Then wire them up to decide which channel is selected
    And(a=notHi, b=notLo, out=selA);
    And(a=notHi, b=lo,    out=selB);
    And(a=hi,    b=notLo, out=selC);
    And(a=hi,    b=lo,    out=selD);

    // Finally, each circuit looks like this

    // And(a=selA, b=a, out=w1);
    // And(a=selB, b=b, out=w2);
    // And(a=selC, b=c, out=w3);
    // And(a=selD, b=d, out=w4);
    // Or(a=w1, b=w2, out=w5); Or(a=w3, b=w4, out=w6);
    // Or(a=w5, b=w6, out=out);

    // But there are 16 of them, and it is easier to visualize sorted out:
    // I can't use underscore (w1_0) so I use 's' for "subscript" (w1s0)

    And(a=selA, b=a[0],  out=w1s0);
    And(a=selA, b=a[1],  out=w1s1);
    And(a=selA, b=a[2],  out=w1s2);
    And(a=selA, b=a[3],  out=w1s3);
    And(a=selA, b=a[4],  out=w1s4);
    And(a=selA, b=a[5],  out=w1s5);
    And(a=selA, b=a[6],  out=w1s6);
    And(a=selA, b=a[7],  out=w1s7);
    And(a=selA, b=a[8],  out=w1s8);
    And(a=selA, b=a[9],  out=w1s9);
    And(a=selA, b=a[10], out=w1s10);
    And(a=selA, b=a[11], out=w1s11);
    And(a=selA, b=a[12], out=w1s12);
    And(a=selA, b=a[13], out=w1s13);
    And(a=selA, b=a[14], out=w1s14);
    And(a=selA, b=a[15], out=w1s15);

    And(a=selB, b=b[0],  out=w2s0);
    And(a=selB, b=b[1],  out=w2s1);
    And(a=selB, b=b[2],  out=w2s2);
    And(a=selB, b=b[3],  out=w2s3);
    And(a=selB, b=b[4],  out=w2s4);
    And(a=selB, b=b[5],  out=w2s5);
    And(a=selB, b=b[6],  out=w2s6);
    And(a=selB, b=b[7],  out=w2s7);
    And(a=selB, b=b[8],  out=w2s8);
    And(a=selB, b=b[9],  out=w2s9);
    And(a=selB, b=b[10], out=w2s10);
    And(a=selB, b=b[11], out=w2s11);
    And(a=selB, b=b[12], out=w2s12);
    And(a=selB, b=b[13], out=w2s13);
    And(a=selB, b=b[14], out=w2s14);
    And(a=selB, b=b[15], out=w2s15);

    And(a=selC, b=c[0],  out=w3s0);
    And(a=selC, b=c[1],  out=w3s1);
    And(a=selC, b=c[2],  out=w3s2);
    And(a=selC, b=c[3],  out=w3s3);
    And(a=selC, b=c[4],  out=w3s4);
    And(a=selC, b=c[5],  out=w3s5);
    And(a=selC, b=c[6],  out=w3s6);
    And(a=selC, b=c[7],  out=w3s7);
    And(a=selC, b=c[8],  out=w3s8);
    And(a=selC, b=c[9],  out=w3s9);
    And(a=selC, b=c[10], out=w3s10);
    And(a=selC, b=c[11], out=w3s11);
    And(a=selC, b=c[12], out=w3s12);
    And(a=selC, b=c[13], out=w3s13);
    And(a=selC, b=c[14], out=w3s14);
    And(a=selC, b=c[15], out=w3s15);

    And(a=selD, b=d[0],  out=w4s0);
    And(a=selD, b=d[1],  out=w4s1);
    And(a=selD, b=d[2],  out=w4s2);
    And(a=selD, b=d[3],  out=w4s3);
    And(a=selD, b=d[4],  out=w4s4);
    And(a=selD, b=d[5],  out=w4s5);
    And(a=selD, b=d[6],  out=w4s6);
    And(a=selD, b=d[7],  out=w4s7);
    And(a=selD, b=d[8],  out=w4s8);
    And(a=selD, b=d[9],  out=w4s9);
    And(a=selD, b=d[10], out=w4s10);
    And(a=selD, b=d[11], out=w4s11);
    And(a=selD, b=d[12], out=w4s12);
    And(a=selD, b=d[13], out=w4s13);
    And(a=selD, b=d[14], out=w4s14);
    And(a=selD, b=d[15], out=w4s15);

    Or8Way(in[0]=w1s0,  in[1]=w2s0,  in[2]=w3s0,  in[3]=w4s0,  out=out[0]);
    Or8Way(in[0]=w1s1,  in[1]=w2s1,  in[2]=w3s1,  in[3]=w4s1,  out=out[1]);
    Or8Way(in[0]=w1s2,  in[1]=w2s2,  in[2]=w3s2,  in[3]=w4s2,  out=out[2]);
    Or8Way(in[0]=w1s3,  in[1]=w2s3,  in[2]=w3s3,  in[3]=w4s3,  out=out[3]);
    Or8Way(in[0]=w1s4,  in[1]=w2s4,  in[2]=w3s4,  in[3]=w4s4,  out=out[4]);
    Or8Way(in[0]=w1s5,  in[1]=w2s5,  in[2]=w3s5,  in[3]=w4s5,  out=out[5]);
    Or8Way(in[0]=w1s6,  in[1]=w2s6,  in[2]=w3s6,  in[3]=w4s6,  out=out[6]);
    Or8Way(in[0]=w1s7,  in[1]=w2s7,  in[2]=w3s7,  in[3]=w4s7,  out=out[7]);
    Or8Way(in[0]=w1s8,  in[1]=w2s8,  in[2]=w3s8,  in[3]=w4s8,  out=out[8]);
    Or8Way(in[0]=w1s9,  in[1]=w2s9,  in[2]=w3s9,  in[3]=w4s9,  out=out[9]);
    Or8Way(in[0]=w1s10, in[1]=w2s10, in[2]=w3s10, in[3]=w4s10, out=out[10]);
    Or8Way(in[0]=w1s11, in[1]=w2s11, in[2]=w3s11, in[3]=w4s11, out=out[11]);
    Or8Way(in[0]=w1s12, in[1]=w2s12, in[2]=w3s12, in[3]=w4s12, out=out[12]);
    Or8Way(in[0]=w1s13, in[1]=w2s13, in[2]=w3s13, in[3]=w4s13, out=out[13]);
    Or8Way(in[0]=w1s14, in[1]=w2s14, in[2]=w3s14, in[3]=w4s14, out=out[14]);
    Or8Way(in[0]=w1s15, in[1]=w2s15, in[2]=w3s15, in[3]=w4s15, out=out[15]);
}
