// -*- c -*-

class Ship {
  static Array xs, ys;

  field int x, y;
  field int dx, dy;
  field int p1x, p1y, p2x, p2y; // ship corners
  field int angle;

  function void init() {
    let xs = Trig.xs();
    let ys = Trig.ys();

    return;
  }

  constructor Ship new(int a, int b) {
    let x = a;
    let y = b;
    let angle = 90;
    let dx = 0;
    let dy = 0;

    do update_corners();

    return this;
  }

  method void debug() {
    do Grid.debugX(0, "x = ", x);
    do Grid.debugX(1, "y = ", y);
    do Grid.debugX(2, "a = ", angle);
    do Grid.debugX(3, "dx = ", dx);
    do Grid.debugX(4, "dy = ", dy);

    return;
  }

  method void update() {
    var int key, dirty;
    var Array xy;

    if (dx | dy) {
      do erase();
      do move();
    }

    let dirty = 0;
    let key = Keyboard.keyPressed();

    if (key) {
      if (key = 131) { // up
        let dirty = 1;

        let xy = Array.new(2);
        do Trig.lookup_xy(angle, xy);
        let dx = dx + Math.divide(xy[0], 2);
        let dy = dy + Math.divide(xy[1], 2);
        do Memory.deAlloc(xy);
      }

      if (key = 133) { // down
        if (dx) { if (dx > 0) { let dx = dx - 1; } else { let dx = dx + 1; } }
        if (dy) { if (dy > 0) { let dy = dy - 1; } else { let dy = dy + 1; } }
      }

      if (key = 130) { // left
        let dirty = 1;
        let angle = MathX.mod(angle + 375, 360);
        if (~(dx | dy)) {
          do erase();
        }
        do update_corners();
      }

      if (key = 132) { // right
        let dirty = 1;
        let angle = MathX.mod(angle + 345, 360);
        if (~(dx | dy)) {
          do erase();
        }
        do update_corners();
      }
    }

    return;
  }

  method void update_corners() {
    var Array xy;

    let xy = Array.new(2);

    do Trig.calculate_xy(0, 0, angle + 165, 5, xy);
    let p1x = xy[0];
    let p1y = xy[1];

    do Trig.calculate_xy(0, 0, angle + 205, 5, xy);
    let p2x = xy[0];
    let p2y = xy[1];

    do Memory.deAlloc(xy);

    return;
  }

  method void erase() {
    do Screen.setColor(false);
    do draw();
    do Screen.setColor(true);

    return;
  }

  method void move() {
    var int u;

    let x = MathX.mod(512 + x + dx, 512);
    let y = MathX.mod(256 + y + dy, 256);

    return;
  }

  method void draw() {
    var int x1, y1, x2, y2;

    let x1 = MathX.mod(512 + x + p1x, 512);
    let y1 = MathX.mod(256 + y + p1y, 256);
    let x2 = MathX.mod(512 + x + p2x, 512);
    let y2 = MathX.mod(256 + y + p2y, 256);

    do Screen.drawLine(x, y, x1, y1);
    do Screen.drawLine(x, y, x2, y2);
    do Screen.drawLine(x1, y1, x2, y2);

    return;
  }
}
