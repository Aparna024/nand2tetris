file "vm2.rb"

def vm out, *files
  sh "./vm2.rb #{files.join " "} > #{out}"
end

rule ".asm" => ".vm" do |t|
  vm t.name, t.source
end

rule ".out" => ".asm" do |t|
  base = t.source.sub(/\.asm$/, "")
  full = File.expand_path base
  sh "../../tools/CPUEmulator.sh #{full}.tst || (diff -u #{base}.cmp #{t.name}; rm #{t.name} ; false)"
end

def wire base
  file "#{base}.asm" => [ "Rakefile", "vm2.rb", "#{base}.vm"]
  file "#{base}.out" => [ "#{base}.asm" ]
  task :default => "#{base}.out"
end

def wire_multi base, input
  file "#{base}.asm" => [ "Rakefile", "vm2.rb", *input] do |t|
    vm t.name, *input
  end
  file "#{base}.out" => [ "#{base}.asm" ]
  task :default => "#{base}.out"
end

wire "ProgramFlow/BasicLoop/BasicLoop"
wire "ProgramFlow/FibonacciSeries/FibonacciSeries"

wire "FunctionCalls/SimpleFunction/SimpleFunction"

wire_multi("FunctionCalls/FibonacciElement/FibonacciElement",
           Dir["FunctionCalls/FibonacciElement/{Main,Sys}.vm"])

wire_multi("FunctionCalls/StaticsTest/StaticsTest",
           Dir["FunctionCalls/StaticsTest/{Class1,Class2,Sys}.vm"])
