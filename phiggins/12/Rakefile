DEBUG = ENV['DEBUG']

def tool tool, input
  `#{File.expand_path("../../tools/#{tool}")} #{File.expand_path(input)}`
end

def with_os_files dir
  os_files = Dir["../../tools/OS/*.vm"].reject { |f|
    File.exist?(dir + "#{File.basename(f, ".vm")}.jack")
  }.map {|f|
    File.expand_path(f)
  }

  os_files.each {|os_file| symlink os_file, dir, verbose: DEBUG }

  yield

  os_files.each {|os_file| rm File.join(dir, File.basename(os_file)), verbose: DEBUG }
end

tests = %w[
  Array
  Math
  Keyboard
  Memory
  Sys
]
=begin
  Output
  Screen
  String
]
=end

tests.each do |t|
  test_dir = Pathname.new "#{t}Test"
  tst_file = test_dir + "#{t}Test.tst"
  cmp_file = test_dir + "#{t}Test.cmp"
  out_file = test_dir + "#{t}Test.out"

  task "#{t}:compile" do
    tool "JackCompiler.sh", test_dir
    abort unless $?.success?
  end

  task "#{t}:test" => ["#{t}:clean", "#{t}:compile"] do
    with_os_files(test_dir) do
      tool "VMEmulator.sh", tst_file

      unless $?.success?
        msg = ["Expected:", File.read(cmp_file), "Got:", File.read(out_file)].join("\n")
        rm out_file
        abort msg
      end
    end
  end

  task "#{t}:clean" do
    Dir[test_dir + "*.vm"].each {|f| rm f, force: true, verbose: DEBUG }
  end

  if File.exist?(tst_file)
    task t => "#{t}:test"
  else
    task t => "#{t}:compile"
  end
end

task :default => :test

task :test => tests

task :clean => tests.map {|t| "#{t}:clean" }

task :vm => :test do
  sh "../../tools/VMEmulator.sh"
end
