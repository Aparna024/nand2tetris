// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
      var int i, x;
      let twoToThe = Array.new(16);

      let i = 0;
      let x = 1;

      while(i < 16) {
        let twoToThe[i] = x;
        let x = x + x;
        let i = i + 1;
      }

      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if(x < 0) {
        return x * -1;
      } else {
        return x;
      }
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
      var int sum, shiftedX, j;

      let sum = 0;
      let shiftedX = x;
      let j = 0;

      while(j < 16) {
        if(Math.bit(y, j)) {
          let sum = sum + shiftedX;
        }

        let shiftedX = shiftedX + shiftedX;
        let j = j + 1;
      }

      return sum;
    }

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
      var boolean negative;
      var int q, result;

      if(((x > 0) & (y > 0)) | ((x < 0) & (y < 0))) {
        let negative = false;
      } else {
        let negative = true;
      }

      let x = Math.abs(x);
      let y = Math.abs(y);

      if(y > x) {
        return 0;
      }

      let q = Math.divide(x, 2*y);

      if( (x - (2 * q * y)) < y) {
        let result = 2 * q;
      } else {
        let result = (2 * q) + 1;
      }

      if(negative) {
        let result = result * -1;
      }

      return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int j, y, temp, temp2, n;

      let j = 15;

      while(j > -1) {
        if(x < twoToThe[j]) {
          let n = j;
        }

        let j = j - 1;
      }

      let y = 0;
      let j = n;

      while(j > -1) {
        let temp = y + twoToThe[j];
        let temp2 = temp * temp;

        if((temp2 - 1 < x) & (temp2 > 0)) {
          let y = temp;
        }

        let j = j - 1;
      }

      return y;

      /*
      var int root, temp;
      let root = 1;
      let temp = 1;
      while(temp < x) {
        let root = root + 1;
        let temp = root * root;
      }

      return root;
      */
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if(a > b) {
        return a;
      } else {
        return b;
      }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if(a > b) {
        return b;
      } else {
        return a;
      }
    }

    function boolean bit(int number, int position) {
      return number & twoToThe[position];
    }
}
