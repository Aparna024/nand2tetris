// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // instruction
    // 15     (i) 0=A, 1=C instruction
    // 13..14 (x) unused
    // 12     (a) comp, A or M as input to ALU
    // 6..11  (c) comp, what function ALU computes
    // 3..5   (d) 3=M, 4=D, 5=A as destination
    // 0..2   (j) jump condition

    Not(in=instruction[15], out=instructiona);
    Or(a=instructiona, b=instruction[5], out=loada);

    Mux16(a[0..14]=instruction[0..14], b=outalu, sel=instruction[15], out=outmux);

    ARegister(in=outmux, load=loada, out[0..14]=addressM, out=outa);

    And(a=instruction[15], b=instruction[4], out=loadd);
    DRegister(in=outalu, load=loadd, out=outd);

    Mux(a=true,   b=instruction[11], sel=instruction[15], out=zx);
    Mux(a=true,   b=instruction[10], sel=instruction[15], out=nx);
    Mux(a=false,  b=instruction[9],  sel=instruction[15], out=zy);
    Mux(a=false,  b=instruction[8],  sel=instruction[15], out=ny);
    Mux(a=false,  b=instruction[7],  sel=instruction[15], out=f);
    Mux(a=false,  b=instruction[6],  sel=instruction[15], out=no);

    And(a=instruction[12], b=instruction[15], out=chooseaorm);
    Mux16(a=outa, b=inM, sel=chooseaorm, out=aorm);
    ALU(x=outd, y=aorm, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no,
      out=outalu, out=outM, zr=zr, ng=ng);

    And(a=instruction[2], b=ng, out=jumpneg);
    And(a=instruction[1], b=zr, out=jumpzero);
    Not(in=ng, out=ngp);
    Not(in=zr, out=zrp);
    And(a=ngp, b=zrp, out=pos);
    And(a=pos, b=instruction[0], out=jumppos);

    Or(a=jumpneg, b=jumpzero, out=jumpa);
    Or(a=jumpa, b=jumppos, out=alujump);
    And(a=alujump, b=instruction[15], out=jump);

    PC(in=outa, reset=reset, inc=true, load=jump, out[0..14]=pc, out[15]=false);

    And(a=instruction[15], b=instruction[3], out=writeM);
}
