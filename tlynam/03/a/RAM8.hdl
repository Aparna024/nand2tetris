// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load=1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out after the next time step.)

 CHIP Register {
    IN in[16], load;
    OUT out[16];

CHIP Mux8Way16 {
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16];

| time |   in   |load |address|  out   |
| 0+   |      0 |  0  |   0   |      0 |
| 1    |      0 |  0  |   0   |      0 |
| 1+   |      0 |  1  |   0   |      0 |
| 2    |      0 |  1  |   0   |      0 |
| 2+   |  11111 |  0  |   0   |      0 |
| 3    |  11111 |  0  |   0   |      0 |
| 3+   |  11111 |  1  |   1   |      0 |
| 4    |  11111 |  1  |   1   |  11111 |
| 4+   |  11111 |  0  |   0   |      0 |
| 5    |  11111 |  0  |   0   |      0 |
| 5+   |   3333 |  0  |   3   |      0 |
| 6    |   3333 |  0  |   3   |      0 |
| 6+   |   3333 |  1  |   3   |      0 |
| 7    |   3333 |  1  |   3   |   3333 |
| 7+   |   3333 |  0  |   3   |   3333 |
| 8    |   3333 |  0  |   3   |   3333 |
| 8    |   3333 |  0  |   1   |  11111 |
| 8+   |   7777 |  0  |   1   |  11111 |
| 9    |   7777 |  0  |   1   |  11111 |
| 9+   |   7777 |  1  |   7   |      0 |
| 10   |   7777 |  1  |   7   |   7777 |
| 10+  |   7777 |  0  |   7   |   7777 |
| 11   |   7777 |  0  |   7   |   7777 |
| 11   |   7777 |  0  |   3   |   3333 |

000
001
010
011
100
101
110
111

select register and output value
load register with new value

CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;

 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:

    DMux8Way(in=load, sel=address, a=regs0, b=regs1, c=regs2, d=regs3, e=regs4, f=regs5, g=regs6, h=regs7);
    Register(in=in, load=regs0, out=reg0);
    Register(in=in, load=regs1, out=reg1);    
    Register(in=in, load=regs2, out=reg2);
    Register(in=in, load=regs3, out=reg3);
    Register(in=in, load=regs4, out=reg4);
    Register(in=in, load=regs5, out=reg5);
    Register(in=in, load=regs6, out=reg6);
    Register(in=in, load=regs7, out=reg7);
    Mux8Way16(a=reg0, b=reg1, c=reg2, d=reg3, e=reg4, f=reg5, g=reg6, h=reg7, sel=address, out=out);

}